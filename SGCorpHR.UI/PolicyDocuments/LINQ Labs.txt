This lab includes a pre-configured Visual Studio project that can be found in your June2015-DotNetAkron-Materials github repository.  The project is called LINQ and can be located in the LABS folder.

Complete the following exercises:

1. Find all products that are out of stock.
2. Find all products that are in stock and cost more than 3.00 per unit.
3. Find all customers in Washington, print their name then their orders. (Region == "WA")
4. Create a new sequence with just the names of the products.
5. Create a new sequence of products and unit prices where the unit prices are increased by 25%.
6. Create a new sequence of just product names in all upper case.
7. Create a new sequence with products with even numbers of units in stock.
8. Create a new sequence of products with ProductName, Category, and rename UnitPrice to Price.
9. Make a query that returns all pairs of numbers from both arrays such that the number from numbersA is less than the number from numbersB.
10. Select CustomerID, OrderID, and Total where the order total is less than 500.00.
11. Write a query to take only the first 3 elements from NumbersA.
12. Get only the first 3 orders from customers in Washington.
13. Skip the first 3 elements of NumbersA.
14. Get all except the first two orders from customers in Washington.
15. Get all the elements in NumbersC from the beginning until an element is greater or equal to 6.
16. Return elements starting from the beginning of NumbersC until a number is hit that is less than its position in the array.
17. Return elements from NumbersC starting from the first element divisible by 3.
18. Order products alphabetically by name.
19. Order products by UnitsInStock descending.
20. Sort the list of products, first by category, and then by unit price, from highest to lowest.
21. Reverse NumbersC.
22. Display the elements of NumbersC grouped by their remainder when divided by 5.
23. Display products by Category.
24. Group customer orders by year, then by month.
25. Create a list of unique product category names.
26. Get a list of unique values from NumbersA and NumbersB.
27. Get a list of the shared values from NumbersA and NumbersB.
28. Get a list of values in NumbersA that are not also in NumbersB.
29. Select only the first product with ProductID = 12 (not a list).
30. Write code to check if ProductID 789 exists.
31. Get a list of categories that have at least one product out of stock.
32. Determine if NumbersB contains only numbers less than 9.
33. Get a grouped a list of products only for categories that have all of their products in stock.
34. Count the number of odds in NumbersA.
35. Display a list of CustomerIDs and only the count of their orders.
36. Display a list of categories and the count of their products.
37. Display the total units in stock for each category.
38. Display the lowest priced product in each category.
39. Display the highest priced product in each category.
40. Show the average price of product for each category.

Once finished, submit the path to the LINQ project in your github repository in the text box below.